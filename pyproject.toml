[build-system]
requires = ['poetry-core>=1.5.1']
build-backend = 'poetry.core.masonry.api'

[tool.poetry]
name = 'frontik_example'
version = '1.2.3'
description = 'Frontik on knee'
authors = ['Leonid Vinogradov <l.vinogradov@hh.ru>']

[tool.poetry.dependencies]
python = '3.11.*'
frontik = {git = 'git+ssh://git@github.com/hhru/frontik', tag = '7.5.1'}


[tool.poetry.group.test.dependencies]
pytest = '>=7.2.0'
pytest-asyncio = '0.21.1'
pycodestyle = '>=2.5.0'
requests = '>=2.0'
types-requests = '2.31.0.8'
tox = '4.6.4'
lxml-asserts = '0.1.2'
tornado-httpclient-mock = '0.2.3'
sentry-sdk = '1.26.0'
aiokafka = '0.8.1'
aioresponses = '0.7.4'
mypy = '1.6.0'
black = '23.9.1'
ruff = '0.1.0'

[tool.pytest.ini_options]
addopts = '''
  --tb native
  --asyncio-mode=auto
  -p no:warnings
'''

[tool.black]
line-length = 120
skip-string-normalization = true

[tool.mypy]
warn_redundant_casts = true
warn_unused_ignores = true
warn_unused_configs = true
show_error_codes = true

disallow_any_generics = true
disallow_subclassing_any = true
warn_return_any = true
disallow_untyped_defs = true
strict = true
#strict = false

ignore_missing_imports = true
follow_imports = 'silent'
disallow_untyped_calls = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
check_untyped_defs = true
exclude = [
    '.*/api/2.*',
]


[tool.ruff]
line-length = 120
target-version = 'py311'
select = [
    'F','E','W','C90','I','N','UP','YTT','ANN','ASYNC','S','BLE','B','A','COM','C4','DTZ','T10','EM','EXE',
    'FA','ISC','ICN','G','PIE','T20','PYI','PT','Q','SLF','SLOT','SIM','TID','TCH','INT','ARG',
    'TD','FIX','ERA','PGH','PL','TRY','FLY','PERF','FURB','LOG','RUF',
]
preview = true
#ignore = [  # первый айтем в линии хотелось бы выкинуть, остальные по делу
#    'ANN','ANN101', 'ANN002', 'ANN003', 'ANN102', 'ANN401',
#    'SLF001',
#    'PL', 'PLR6301',
#    'ARG', 'ARG002',
#    'Q',
#    'TRY',
#    'BLE',
#    'PGH',
#    'B904',
#    'B028',
#    'PYI',
#    'S',
#    'PIE',
#    'C901',
#    'N818',
#    'RUF',
#    'A',
#    'DTZ',
#]

[tool.ruff.flake8-quotes]
inline-quotes = 'single'

[tool.ruff.per-file-ignores]
'tests/**/*.py' = [
    'S101', # asserts allowed in tests...
    'ARG', # Unused function args -> fixtures nevertheless are functionally relevant...
    'FBT', # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    'PLR2004', # Magic value used in comparison, ...
    'S311', # Standard pseudo-random generators are not suitable for cryptographic purposes
    'PT009', 'PT027', # while using unittest
]

[tool.ruff.format]
quote-style = 'single'
